{
  "version": 4,
  "terraform_version": "1.2.9",
  "serial": 20,
  "lineage": "fca24620-3399-fd53-458f-68a58d02c91e",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "sort_json_stack",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": [
              "CAPABILITY_NAMED_IAM"
            ],
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:706815973727:stack/sort-json-stack/c8783e00-8598-11ed-a36f-12eb5b87d09d",
            "name": "sort-json-stack",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {},
            "parameters": {},
            "policy_body": null,
            "policy_url": null,
            "tags": {},
            "tags_all": {},
            "template_body": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'AWS Lambda function and API Gateway API'\n\nResources:\n  LambdaRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: lambda_role\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - 'sts:AssumeRole'\n      Policies:\n        - PolicyName: invoke_api_policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - apigateway:*\n                Resource: '*'\n  SortJsonFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: sort_json\n      Runtime: nodejs12.x\n      Handler: index.handler\n      Role: !GetAtt LambdaRole.Arn\n      Code:\n        ZipFile: !Sub |\n          'use strict';\n          \n          exports.handler = async (event) =\u003e {\n            // Parse the request body to extract the JSON payload\n            const requestBody = JSON.parse(event.body);\n  \n            // Read the request variables from the parsed request body\n            const sortBy = requestBody.sortBy;\n            const data = requestBody.data;\n\n            let sorted;\n            \n            // Sort the input based on the specified parameter\n            if (sortBy === 'key') {\n              // Sort the JSON object alphabetically by key\n              sorted = {};\n              Object.keys(data).sort().forEach((key) =\u003e {\n                sorted[key] = data[key];\n              });\n            } else if (sortBy === 'alphabetical') {\n              // Sort the JSON array alphabetically by element value\n              sorted = data.sort((a, b) =\u003e a.localeCompare(b));\n            } else if (sortBy === 'numeric') {\n              // Sort the JSON array numerically by element value\n              sorted = data.sort((a, b) =\u003e a - b);\n            }\n            \n            return {\n              statusCode: 200,\n              body: JSON.stringify(sorted),\n            };\n          };\n  SortJsonApi:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Name: sort_json_api\n  SortJsonResource:\n    Type: AWS::ApiGateway::Resource\n    Properties:\n      RestApiId: !Ref SortJsonApi\n      ParentId: !GetAtt SortJsonApi.RootResourceId\n      PathPart: sort\n  SortJsonMethod:\n    Type: AWS::ApiGateway::Method\n    Properties:\n      HttpMethod: POST\n      ResourceId: !Ref SortJsonResource\n      RestApiId: !Ref SortJsonApi\n      AuthorizationType: NONE\n      Integration:\n        Type: AWS_PROXY\n        IntegrationHttpMethod: POST\n        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SortJsonFunction.Arn}/invocations'\n  SortJsonPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      FunctionName: !Ref SortJsonFunction\n      Action: lambda:InvokeFunction\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SortJsonApi}/*/*'",
            "template_url": null,
            "timeout_in_minutes": 0,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19"
        }
      ]
    }
  ]
}
